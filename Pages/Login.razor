@page "/"
@using Microsoft.AspNetCore.Identity
@using BlazorTD.Models;
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager


@*This is where the user lands when they first load up the application*@
@if (isLoggingIn)
{
    <p>Logging in...</p>
}
else
{
<div class="section bg">
    <div class="container">
			<div class="row full-height justify-content-center">
				<div class="col-12 text-center align-self-center py-5">
					<div class="section pb-5 pt-5 pt-sm-2 text-center">
                        <img src="images/Logo.png" alt="Logo">
						<h6 class="mb-0 pb-3"><span>Log In </span><span>Sign Up</span></h6>
			          	<input class="checkbox" type="checkbox" id="reg-log" name="reg-log"/>
			          	<label for="reg-log"></label>
						<div class="card-3d-wrap mx-auto">
							<div class="card-3d-wrapper">
								<div class="card-front">
									<div class="center-wrap">
										<div class="section text-center">
											<h4 class="mb-4 pb-3 yellow-text">Log In</h4>
											<div class="form-group">
												<input type="text" name="logname" class="form-style" placeholder="Your Username" id="logname" autocomplete="off" @bind="loginUsername">
												@if (showLoginValidationMessages && string.IsNullOrWhiteSpace(loginUsername))
												{
													<p class="text-danger">Please enter a username.</p>
												}
											</div>	
											<div class="form-group mt-2">
												<input type="password" name="logpass" class="form-style" placeholder="Your Password" id="logpass" autocomplete="off" @bind="loginPassword">
												@if (showLoginValidationMessages && string.IsNullOrWhiteSpace(loginPassword))
												{
													<p class="text-danger">Please enter a password.</p>
												}
											</div>
											@if (showLoginMessages)
												{
													<p class="text-danger">Invalid Username or password entered. Please try again.</p>
												}
											<a @onclick="LoginUser" class="btn mt-4">Login</a>
                            				@* <p class="mb-0 mt-4 text-center"><a href="#0" class="link">Forgot your password?</a></p> *@
				      					</div>
			      					</div>
			      				</div>
								<div class="card-back">
									<div class="center-wrap">
										<div class="section text-center">
											<h4 class="mb-4 pb-3 yellow-text">Sign Up</h4>
											<div class="form-group">
												<input type="text" name="registerUsername" class="form-style" placeholder="Your Username" id="registerUsername" autocomplete="off" @bind="registerUsername">
												@if (showValidationMessages && string.IsNullOrWhiteSpace(registerUsername))
												{
													<p class="text-danger">Username is required.</p>
												}
											</div>	
											<div class="form-group mt-2">
												<input type="email" name="email" class="form-style" placeholder="Your Email" id="email" autocomplete="off" @bind="email">
                                                @if (showValidationMessages && string.IsNullOrWhiteSpace(email) || !new System.ComponentModel.DataAnnotations.EmailAddressAttribute().IsValid(email))
                                                {
													<p class="text-danger">A valid email is required.</p>
												}
											</div>	
											<div class="form-group mt-2">
												<input type="password" name="registerPassword" class="form-style" placeholder="Your Password" id="registerPassword" autocomplete="off" @bind="registerPassword">
												@if (showValidationMessages && (string.IsNullOrWhiteSpace(registerPassword) || registerPassword.Length < 6))
												{
													<p class="text-danger">Password is required and must be at least 6 characters long with at least one number, uppercase, lowercase and special character </p>
												}

												@if (showSuccessMessages)
												{
													<p class="text-success">Registeration Successful!</p>
												}
												@if (showRegistrationMessages)
												{
													<p class="text-danger">Username is already taken. Please choose another username.</p>
												}
											</div>
											<a @onclick="RegisterUser" class="btn mt-4">Sign up</a>
				      					</div>
			      					</div>
			      				</div>
			      			</div>
			      		</div>
			      	</div>
		      	</div>
	      	</div>
	    </div>
	</div>

    @code {

    private bool isLoggingIn;
    private string? loginUsername;
    private string? loginPassword;

    private string? email;

    private string? registerUsername;

    private string? registerPassword;

	private bool showValidationMessages;

	private bool showLoginValidationMessages;

	private bool showSuccessMessages;

	private bool showLoginMessages;

	private bool showRegistrationMessages;

	// Method to register a user and check if the username already exists or checks the validation of the inputs
    private async Task RegisterUser()
    {

		showValidationMessages = false;
		showSuccessMessages = false;
		showLoginMessages = false;
		showRegistrationMessages = false;

		var user = new ApplicationUser
        {
            UserName = registerUsername,
            Email = email
        };

		// Check if the inputs are valid or if it is empty, show the validation messages
        if (string.IsNullOrWhiteSpace(registerUsername) || string.IsNullOrWhiteSpace(email) || !new System.ComponentModel.DataAnnotations.EmailAddressAttribute().IsValid(email) || (string.IsNullOrWhiteSpace(registerPassword) || registerPassword.Length < 6)) {
			showValidationMessages = true;
		}

		else 
    {
        // Check if the username already exists and if it does, show the registration messages saying username is taken
        var existingUser = await UserManager.FindByNameAsync(registerUsername);
        if (existingUser != null)
        {
            showRegistrationMessages = true;
        }

		// If the username is not taken, create the user and show the success messages
        var result = await UserManager.CreateAsync(user, registerPassword ?? string.Empty);

        if (result.Succeeded)
        {
            showSuccessMessages = true;
        }
        else
        {
        }
    }

    }

// Method to login a user and check if the username and password is correct
private async Task LoginUser()
{	
	// Check if the username and password is empty and if it is, show the login validation messages
    if (string.IsNullOrWhiteSpace(loginUsername) || string.IsNullOrWhiteSpace(loginPassword))
    {
        showLoginValidationMessages = true;
    }
    else
    {
        isLoggingIn = true;

		// Check if the username and password is correct and if it is, navigate to the main menu with the stats pass to the main menu
        var user = await UserManager.FindByNameAsync(loginUsername);

        if (user != null)
        {
            var result = await SignInManager.CheckPasswordSignInAsync(user, loginPassword, false);

            if (result.Succeeded)
            {
                UserService.Username = loginUsername;
				UserService.GoldSpent = user.GoldSpent;
				UserService.EnemyCounter = user.EnemyCounter;
				UserService.TowerBought = user.TowerBought;
                NavigationManager.NavigateTo("/mainmenu");
            }
            else
            {
                // Fail login
            }
        }
        else
        {
            showLoginMessages = true;
        }

        isLoggingIn = false;
    }
}

}
}
