@page "/Game"

<PageTitle>Index</PageTitle>

<div id="gameContainer" @onclick="GenerateNewObject">
    <svg tabindex="0" height="80vh" width="72vw" @onmousemove="MouseMoved">
        <rect x="@x" y="@y" height="50" width="50"></rect>
        @foreach (var gameObj in objects)
        {
            <rect tabindex="1" x="@gameObj.X" y="@gameObj.Y" height="50" width="50"></rect>
        }
    </svg>

    <nav class="collapse d-lg-block sidebar right-sidebar-menu consistent-header-parent" id="navbar">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0" id="towers">
                    Towers
                </h5>
            </div>
            <div class="card-header btn btn-link collapsed" id="headingOne" @onclick="StartMouseMovement">
             <h5 class="mb-0">
                <button class="btn btn-link collapsed">
                Melee
                </button>
            </h5>
            </div>
            <div class="card-header btn btn-link collapsedr" id="headingTwo">
             <h5 class="mb-0">
                <button class="btn btn-link collapsed">
                Ranged
                </button>
            </h5>
            </div>
            <div class="card-header btn btn-link collapsed" id="headingThree">
             <h5 class="mb-0">
                <button class="btn btn-link collapsed">
                Stun
                </button>
            </h5>
            </div>   
            <div class="card-header btn btn-link collapsed" id="headingFour">
             <h5 class="mb-0">
                <button class="btn btn-link collapsed">
                Bomb
                </button>
            </h5>
            </div>    

            <div class="card-header btn btn-link collapsed" id="headingFive">
                <h5 class="mb-0" id="startbutton">
                <button class="btn btn-link collapsed">
                Start
                </button>
            </h5>
            </div>      
        </div>   
    </nav>

</div>
@code {

    class GameObject
    {
        public float X { get; set; }
        public float Y { get; set; }
    }
    List<GameObject> objects = new List<GameObject>();
    float[] xPosition = { 50, 100, 100, 150, 150, 200 , 250, 500, 1000, 1000};
    float[] yPosition = { 50, 50, 100, 100, 50, 50, 50, 50 ,50, 0};

    float x = 50;
    float y = 50;
    int index = 0;

    bool isMouseMovementActive = false;
    
    float factor = 0.01f;

    float speed = 0.005f;
    System.Threading.Timer? timer;

    protected override void OnInitialized() {
        timer = new System.Threading.Timer(MoveAutomatically, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(1));
    }

    void MoveAutomatically(object? state) {

        Task.Run(() => {

            float newX = Interpolation(x, xPosition[index], factor);

            float newY = Interpolation(y, yPosition[index], factor);

            x = newX;
            y = newY;

            factor += speed;

            if (factor >= 1.0f) {
                index = (index + 1) % xPosition.Length;
                factor -= 1.0f;
            }
        InvokeAsync(() => StateHasChanged());
        });
    }

    float Interpolation(float start, float end, float t) {
        return start + t * (end - start);
    }
    void MouseMoved(MouseEventArgs e)
    {
        if(isMouseMovementActive) {
            x = (float)e.ClientX;
            y = (float)e.ClientY;
            StateHasChanged();
        }
    }
    void StartMouseMovement()
    {
        isMouseMovementActive = !isMouseMovementActive;
    }

    void GenerateNewObject(MouseEventArgs e)
    {
        var newObject = new GameObject
        {
            X = (float)e.ClientX,
            Y = (float)e.ClientY
        };
        objects.Add(newObject);
        StateHasChanged();
    }
}
